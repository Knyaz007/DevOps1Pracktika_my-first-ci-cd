name: CI/CD Pipeline with SAST  # Имя workflow, отображается в GitHub Actions

# Указываем, когда запускать workflow
on:
  push:                       # при пуше в указанные ветки
    branches: [ main, master ]
  pull_request:               # при создании Pull Request в указанные ветки
    branches: [ main, master ]

jobs:
  security-scan:              # Первый job: проверка безопасности и качества кода
    name: Security Scan
    runs-on: ubuntu-latest    # Запускается на последней версии Ubuntu
    steps:
      # -------------------------------
      - name: Checkout code     # Шаг 1: Клонируем код репозитория на runner
        uses: actions/checkout@v4

      - name: Set up Python     # Шаг 2: Устанавливаем Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies  # Шаг 3: Устанавливаем зависимости и инструменты для тестов
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest bandit jq

      - name: Run Bandit SAST Scan   # Шаг 4: Запускаем Bandit для анализа кода на уязвимости
        run: |
          bandit -r . --severity-level high --confidence-level high -f json -o bandit_results.json

      - name: Check Bandit Results    # Шаг 4.1: Проверяем результаты Bandit и "фейлим" пайплайн при критических уязвимостях
        id: bandit-check
        run: |
          if [ -f bandit_results.json ]; then
            if jq -e '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH")' bandit_results.json > /dev/null; then
              echo "Bandit found critical vulnerabilities! Failing the pipeline."
              exit 1
            else
              echo "No critical vulnerabilities found by Bandit."
            fi
          else
            echo "Bandit report not found. Assuming no issues."
          fi

      - name: Upload Bandit Report      # ✅ Шаг 4.2: Сохраняем bandit_results.json как артефакт для последующего анализа
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_results.json

      - name: Run flake8 code style check   # ✅ Шаг 5: Проверка стиля кода с flake8
        run: |
          pip install flake8
          flake8 . --output-file=flake8_report.txt --statistics || true   # Сохраняем отчет в файл, пайплайн не падает

      - name: Upload flake8 report       # Сохраняем отчет flake8 как артефакт
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      - name: Run Trivy vulnerability scanner   # Шаг 6: Сканируем зависимости (requirements.txt) на известные CVE
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'             # workflow упадет, если найдены критические уязвимости
          ignore-unfixed: true        # игнорируем уязвимости без фикса
          severity: 'HIGH,CRITICAL'

      - name: Run Tests with pytest         # Шаг 7: Запуск unit-тестов с pytest
        run: |
          python -m pytest tests/ -v

  build:                                 # ✅ Шаг 3 из вашего запроса: отдельная задача сборки
    name: Build Project
    runs-on: ubuntu-latest
    needs: security-scan                 # Запускать только после успешного security-scan
    steps:
      - name: Checkout code             # Клонируем код
        uses: actions/checkout@v4

      - name: Set up Python             # Настраиваем Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies      # Устанавливаем зависимости для сборки Добавляем pytest, иначе тесты не запустятся
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest            

      - name: Run tests as part of build # Можно повторно прогнать тесты как часть сборки
        run: |
          python -m pytest -v
